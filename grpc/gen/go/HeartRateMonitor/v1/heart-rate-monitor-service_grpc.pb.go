// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: HeartRateMonitor/v1/heart-rate-monitor-service.proto

package hrmpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeartRateMonitorServiceClient is the client API for HeartRateMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartRateMonitorServiceClient interface {
	BeatsPerMinute(ctx context.Context, in *BeatsPerMinuteRequest, opts ...grpc.CallOption) (HeartRateMonitorService_BeatsPerMinuteClient, error)
}

type heartRateMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartRateMonitorServiceClient(cc grpc.ClientConnInterface) HeartRateMonitorServiceClient {
	return &heartRateMonitorServiceClient{cc}
}

func (c *heartRateMonitorServiceClient) BeatsPerMinute(ctx context.Context, in *BeatsPerMinuteRequest, opts ...grpc.CallOption) (HeartRateMonitorService_BeatsPerMinuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeartRateMonitorService_ServiceDesc.Streams[0], "/HeartRateMonitor.v1.HeartRateMonitorService/BeatsPerMinute", opts...)
	if err != nil {
		return nil, err
	}
	x := &heartRateMonitorServiceBeatsPerMinuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeartRateMonitorService_BeatsPerMinuteClient interface {
	Recv() (*BeatsPerMinuteResponse, error)
	grpc.ClientStream
}

type heartRateMonitorServiceBeatsPerMinuteClient struct {
	grpc.ClientStream
}

func (x *heartRateMonitorServiceBeatsPerMinuteClient) Recv() (*BeatsPerMinuteResponse, error) {
	m := new(BeatsPerMinuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeartRateMonitorServiceServer is the server API for HeartRateMonitorService service.
// All implementations must embed UnimplementedHeartRateMonitorServiceServer
// for forward compatibility
type HeartRateMonitorServiceServer interface {
	BeatsPerMinute(*BeatsPerMinuteRequest, HeartRateMonitorService_BeatsPerMinuteServer) error
	mustEmbedUnimplementedHeartRateMonitorServiceServer()
}

// UnimplementedHeartRateMonitorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHeartRateMonitorServiceServer struct {
}

func (UnimplementedHeartRateMonitorServiceServer) BeatsPerMinute(*BeatsPerMinuteRequest, HeartRateMonitorService_BeatsPerMinuteServer) error {
	return status.Errorf(codes.Unimplemented, "method BeatsPerMinute not implemented")
}
func (UnimplementedHeartRateMonitorServiceServer) mustEmbedUnimplementedHeartRateMonitorServiceServer() {
}

// UnsafeHeartRateMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartRateMonitorServiceServer will
// result in compilation errors.
type UnsafeHeartRateMonitorServiceServer interface {
	mustEmbedUnimplementedHeartRateMonitorServiceServer()
}

func RegisterHeartRateMonitorServiceServer(s grpc.ServiceRegistrar, srv HeartRateMonitorServiceServer) {
	s.RegisterService(&HeartRateMonitorService_ServiceDesc, srv)
}

func _HeartRateMonitorService_BeatsPerMinute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BeatsPerMinuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeartRateMonitorServiceServer).BeatsPerMinute(m, &heartRateMonitorServiceBeatsPerMinuteServer{stream})
}

type HeartRateMonitorService_BeatsPerMinuteServer interface {
	Send(*BeatsPerMinuteResponse) error
	grpc.ServerStream
}

type heartRateMonitorServiceBeatsPerMinuteServer struct {
	grpc.ServerStream
}

func (x *heartRateMonitorServiceBeatsPerMinuteServer) Send(m *BeatsPerMinuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HeartRateMonitorService_ServiceDesc is the grpc.ServiceDesc for HeartRateMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeartRateMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HeartRateMonitor.v1.HeartRateMonitorService",
	HandlerType: (*HeartRateMonitorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BeatsPerMinute",
			Handler:       _HeartRateMonitorService_BeatsPerMinute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "HeartRateMonitor/v1/heart-rate-monitor-service.proto",
}
